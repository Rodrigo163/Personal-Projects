i <- 1
edges_per_school_w2
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
edges_per_school_w2
for (i in 1:length(edges_w2$ID)){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
edges_per_school_w2[[1]]
edges_per_school_w2[[2]]
edges_per_school_w2[[3]]
edges_per_school_w2[[4]]
edges_per_school_w2[[5]]
edges_per_school_w2[[6]]
edges_per_school_w2[[7]]
edges_per_school_w2[[8]]]
edges_per_school_w2[[8]]
edges_per_school_w2[[9]]
edges_per_school_w2[[10]]
edges_per_school_w2[[11]]
edges_per_school_w2[[12]]
View(school_ID_copyw2)
edges_per_school_w2[[13]]
edges_per_school_w2[[14]]
for (i in 1:14){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:14){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
#removing the 0
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- edges_per_school_w2[[i]][-1]
}
#now creating a dataframe for each school
for (i in 1:31){
school_name <- school_ID_copyw2$ID[i]
aux1 <- vector()
aux2 <- vector()
for (j in 1:length(edges_per_school_w2[[i]])){
aux1 <- c(aux1, toString(edges_per_school_w2[[1]][[j]][1]))
aux2 <- c(aux2, toString(edges_per_school_w2[[1]][[j]][2]))
}
matrixaux <- matrix(c(aux1, aux2), ncol=2)
file_name <- paste("Wave2_", school_name, sep='')
network <- graph_from_edgelist(matrixaux, directed = TRUE)
m <- as.data.frame(get.adjacency(network, sparse = FALSE))
write.csv(m, paste('Y:/eco_redhead/LoRDIA/database/networks/',file_name,'.csv', sep=''), row.names = TRUE)
}
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:14){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
#removing the 0
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- edges_per_school_w2[[i]][-1]
}
#now creating a dataframe for each school
for (i in 1:14){
school_name <- school_ID_copyw2$ID[i]
aux1 <- vector()
aux2 <- vector()
for (j in 1:length(edges_per_school_w2[[i]])){
aux1 <- c(aux1, toString(edges_per_school_w2[[1]][[j]][1]))
aux2 <- c(aux2, toString(edges_per_school_w2[[1]][[j]][2]))
}
matrixaux <- matrix(c(aux1, aux2), ncol=2)
file_name <- paste("Wave2_", school_name, sep='')
network <- graph_from_edgelist(matrixaux, directed = TRUE)
m <- as.data.frame(get.adjacency(network, sparse = FALSE))
write.csv(m, paste('Y:/eco_redhead/LoRDIA/database/networks/',file_name,'.csv', sep=''), row.names = TRUE)
}
edges_per_school_w2[[1]]
edges_per_school_w2[[2]]
edges_per_school_w2[[3]]
edges_per_school_w2[[4]]
edges_per_school_w2[[5]]
for (i in 1:14){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
edges_per_school_w2[[2]]
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:14){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
edges_per_school_w2[[1]]
edges_per_school_w2[[2]]
edges_per_school_w2[[3]]
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:length(school_ID_copyw2$School)){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
View(edges_per_school_w2)
edges_per_school_w2
View(edges)
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
edges_per_school_w2[[1]]
edges_per_school_w2[[2]]
i <- 2
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
edges_per_school_w2[[2]]
edges_per_school_w2
i <- 3
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
edges_per_school_w2
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:100){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
#removing the 0
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- edges_per_school_w2[[i]][-1]
}
#now creating a dataframe for each school
for (i in 1:14){
school_name <- school_ID_copyw2$ID[i]
aux1 <- vector()
aux2 <- vector()
for (j in 1:length(edges_per_school_w2[[i]])){
aux1 <- c(aux1, toString(edges_per_school_w2[[1]][[j]][1]))
aux2 <- c(aux2, toString(edges_per_school_w2[[1]][[j]][2]))
}
matrixaux <- matrix(c(aux1, aux2), ncol=2)
file_name <- paste("Wave2_", school_name, sep='')
network <- graph_from_edgelist(matrixaux, directed = TRUE)
m <- as.data.frame(get.adjacency(network, sparse = FALSE))
write.csv(m, paste('Y:/eco_redhead/LoRDIA/database/networks/',file_name,'.csv', sep=''), row.names = TRUE)
}
edges_per_school_w2
to the corresponding list.
for (i in 1:6000){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
for (i in 1:6000){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
if (!is.empty(sch)){
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
}
for (i in 1:6000){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
sch
typeof(sch)
lenght(sch)
length(sch)
sch <- 4
length(sch)
for (i in 1:6000){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
if (length(sch) != 0){
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
}
for (i in 1:length(edges_w2$ID)){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
if (length(sch) != 0){
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
}
edges_per_school_w2
edges_per_school_w2[[1]]
edges_per_school_w2[[2]]
edges_per_school_w2[[3]]
edges_per_school_w2[[4]]
edges_per_school_w2[[5]]
edges_per_school_w2[[6]]
edges_per_school_w2[[7]]
edges_per_school_w2[[8]]
edges_per_school_w2[[9]]
edges_per_school_w2[[10]]
edges_per_school_w2[[11]]
edges_per_school_w2[[12]]
edges_per_school_w2[[13]]
edges_per_school_w2[[14]]
edges_per_school_w2[[15]]
edges_per_school_w2[[i]] <- edges_per_school_w2[[i]][-1]
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:length(edges_w2$ID)){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
if (length(sch) != 0){
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
}
for (i in edges_per_school_w2){
i <- i[-1]
}
#now creating a dataframe for each school
for (i in 1:14){
school_name <- school_ID_copyw2$ID[i]
aux1 <- vector()
aux2 <- vector()
for (j in 1:length(edges_per_school_w2[[i]])){
aux1 <- c(aux1, toString(edges_per_school_w2[[1]][[j]][1]))
aux2 <- c(aux2, toString(edges_per_school_w2[[1]][[j]][2]))
}
matrixaux <- matrix(c(aux1, aux2), ncol=2)
file_name <- paste("Wave2_", school_name, sep='')
network <- graph_from_edgelist(matrixaux, directed = TRUE)
m <- as.data.frame(get.adjacency(network, sparse = FALSE))
write.csv(m, paste('Y:/eco_redhead/LoRDIA/database/networks/',file_name,'.csv', sep=''), row.names = TRUE)
}
lapply(edges_per_school_w2, function(x) length(x))
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:length(edges_w2$ID)){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
if (length(sch) != 0){
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
}
lapply(edges_per_school_w2, function(x) length(x))
for (i in edges_per_school_w2){
i <- i[-1]
}
lapply(edges_per_school_w2, function(x) length(x))
#first, dividing in waves
edges_w1 <- filter(edges, Wave==1)
edges_w2 <- filter(edges, Wave==2)
edges_w3 <- filter(edges, Wave==3)
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw1 <- filter(school_ID, ID %in% unique(ptable$School1) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w1 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw1$School)){
edges_per_school_w1[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:length(edges_w1$ID)){
school.ID <- ptable$School1[which(ptable$ID == edges_w1$ID[i])]
school.recipient <- ptable$School1[which(ptable$ID == edges_w1$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw1$ID == school.ID)
edges_per_school_w1[[sch]] <- append(edges_per_school_w1[[sch]], list(c(edges_w1$ID[i], edges_w1$Recipient[i])))
}
}
#removing the 0
for (i in 1:length(school_ID_copyw1$School)){
edges_per_school_w1[[i]] <- edges_per_school_w1[[i]][-1]
}
#now creating a dataframe for each school
for (i in 1:31){
school_name <- school_ID_copyw1$ID[i]
aux1 <- vector()
aux2 <- vector()
for (j in 1:length(edges_per_school_w1[[i]])){
aux1 <- c(aux1, toString(edges_per_school_w1[[i]][[j]][1]))
aux2 <- c(aux2, toString(edges_per_school_w1[[i]][[j]][2]))
}
matrixaux <- matrix(c(aux1, aux2), ncol=2)
file_name <- paste("Wave1_", school_name, sep='')
network <- graph_from_edgelist(matrixaux, directed = TRUE)
m <- as.data.frame(get.adjacency(network, sparse = FALSE))
write.csv(m, paste('Y:/eco_redhead/LoRDIA/database/networks/',file_name,'.csv', sep=''), row.names = TRUE)
}
for (i in 33:33){
school_name <- school_ID_copyw1$ID[i]
aux1 <- vector()
aux2 <- vector()
for (j in 1:length(edges_per_school_w1[[i]])){
aux1 <- c(aux1, toString(edges_per_school_w1[[1]][[j]][1]))
aux2 <- c(aux2, toString(edges_per_school_w1[[1]][[j]][2]))
}
matrixaux <- matrix(c(aux1, aux2), ncol=2)
file_name <- paste("Wave1_", school_name, sep='')
network <- graph_from_edgelist(matrixaux, directed = TRUE)
m <- as.data.frame(get.adjacency(network, sparse = FALSE))
write.csv(m, paste('Y:/eco_redhead/LoRDIA/database/networks/',file_name,'.csv', sep=''), row.names = TRUE)
}
#after doing this school by school we see that there are no edges going to school d7kv and that is why the program does not run properly for i=32. We skip that case.
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw2 <- filter(school_ID, ID %in% unique(ptable$School2) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w2 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:length(edges_w2$ID)){
school.ID <- ptable$School2[which(ptable$ID == edges_w2$ID[i])]
school.recipient <- ptable$School2[which(ptable$ID == edges_w2$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw2$ID == school.ID)
if (length(sch) != 0){
edges_per_school_w2[[sch]] <- append(edges_per_school_w2[[sch]], list(c(edges_w2$ID[i], edges_w2$Recipient[i])))
}
}
}
#removing the 0
for (i in 1:length(school_ID_copyw2$School)){
edges_per_school_w2[[i]] <- edges_per_school_w2[[i]][-1]
}
#now creating a dataframe for each school
for (i in 1:14){
school_name <- school_ID_copyw2$ID[i]
aux1 <- vector()
aux2 <- vector()
for (j in 1:length(edges_per_school_w2[[i]])){
aux1 <- c(aux1, toString(edges_per_school_w2[[i]][[j]][1]))
aux2 <- c(aux2, toString(edges_per_school_w2[[i]][[j]][2]))
}
matrixaux <- matrix(c(aux1, aux2), ncol=2)
file_name <- paste("Wave2_", school_name, sep='')
network <- graph_from_edgelist(matrixaux, directed = TRUE)
m <- as.data.frame(get.adjacency(network, sparse = FALSE))
write.csv(m, paste('Y:/eco_redhead/LoRDIA/database/networks/',file_name,'.csv', sep=''), row.names = TRUE)
}
#getting a list of schools present in wave 1 and their IDs
school_ID_copyw3 <- filter(school_ID, ID %in% unique(ptable$School3) )
#now dividing by schools
#Each element of this list will be a list with the edges per school
edges_per_school_w3 <- list()
#adding a zero to not have an empty list
for (i in 1:length(school_ID_copyw3$School)){
edges_per_school_w3[[i]] <- c(0)
}
#looking for school of ID and recipient. If they both have schools and they match, add the edge to the corresponding list.
for (i in 1:length(edges_w3$ID)){
school.ID <- ptable$School3[which(ptable$ID == edges_w3$ID[i])]
school.recipient <- ptable$School3[which(ptable$ID == edges_w3$Recipient[i])]
if ((length(school.ID) != 0) && (length(school.recipient) != 0) && (school.ID == school.recipient)){
sch <- which(school_ID_copyw3$ID == school.ID)
if (length(sch) != 0){
edges_per_school_w3[[sch]] <- append(edges_per_school_w3[[sch]], list(c(edges_w3$ID[i], edges_w3$Recipient[i])))
}
}
}
#removing the 0
for (i in 1:length(school_ID_copyw3$School)){
edges_per_school_w3[[i]] <- edges_per_school_w3[[i]][-1]
}
#now creating a dataframe for each school
for (i in 1:14){
school_name <- school_ID_copyw3$ID[i]
aux1 <- vector()
aux2 <- vector()
for (j in 1:length(edges_per_school_w3[[i]])){
aux1 <- c(aux1, toString(edges_per_school_w3[[i]][[j]][1]))
aux2 <- c(aux2, toString(edges_per_school_w3[[i]][[j]][2]))
}
matrixaux <- matrix(c(aux1, aux2), ncol=2)
file_name <- paste("Wave3_", school_name, sep='')
network <- graph_from_edgelist(matrixaux, directed = TRUE)
m <- as.data.frame(get.adjacency(network, sparse = FALSE))
write.csv(m, paste('Y:/eco_redhead/LoRDIA/database/networks/',file_name,'.csv', sep=''), row.names = TRUE)
}
getwd()
install.packages('RecordLinkage')
library(RecordLinkage)
data(RLdata500)
shiny::runApp('Y:/eco_koster/scripts/Shiny_tests/naming_app')
getwd()
